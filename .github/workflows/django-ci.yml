name: Django CI Básico

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: proyecto_cicd.settings
      DJANGO_SECRET_KEY: dummy-ci
      DJANGO_DEBUG: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Migrate (sqlite)
        run: python manage.py migrate --noinput

      - name: Tests
        run: python manage.py test --verbosity 2

      - name: Empaquetar artefacto desde HEAD (git archive)
        run: |
          git archive --format=tar.gz -o build.tar.gz HEAD

      - name: Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          name: django-build
          path: build.tar.gz

  cd:
      name: CD - Despliegue local (Self-Hosted)
      needs: ci
      runs-on: [self-hosted, deploy]   # usa tu runner con label “deploy”
      if: ${{ github.ref == 'refs/heads/main' && success() }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configurar entorno Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.11"

        - name: Instalar dependencias
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Aplicar migraciones
          run: python manage.py migrate --noinput

        - name: Collectstatic
          run: python manage.py collectstatic --noinput

        - name: Reiniciar servidor Django (puerto 8000) con log
          shell: powershell
          run: |
            $port = 8000

            # 1) Cierra cualquier proceso viejo en 8000
            $conns = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
            if ($conns) {
              $pids = $conns | Select-Object -ExpandProperty OwningProcess | Sort-Object -Unique
              foreach ($pid in $pids) { try { Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue } catch {} }
            }

            # 2) Vars mínimas
            $env:DJANGO_SETTINGS_MODULE = "proyecto_cicd.settings"
            $env:DJANGO_DEBUG = "true"
            $env:DJANGO_SECRET_KEY = "selfhosted-demo"
            $env:DJANGO_ALLOWED_HOSTS = "127.0.0.1,localhost"

            # 3) Arranca server y guarda logs en el workspace
            $wd  = $env:GITHUB_WORKSPACE
            $out = Join-Path $wd "runserver.out.log"
            $err = Join-Path $wd "runserver.err.log"

            Start-Process -FilePath "python" `
              -ArgumentList "manage.py","runserver","127.0.0.1:$port" `
              -WorkingDirectory $wd `
              -RedirectStandardOutput $out `
              -RedirectStandardError $err `
              -WindowStyle Hidden

            Start-Sleep -Seconds 5

            # 4) Verifica que esté escuchando; si no, muestra logs y falla
            $listening = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
            if (-not $listening) {
              Write-Host "No hay proceso escuchando en $port. Últimas líneas de log:"
              if (Test-Path $out) { Get-Content $out -Tail 100 | Write-Host }
              if (Test-Path $err) { Get-Content $err -Tail 100 | Write-Host }
              exit 1
            }

            Write-Host "Servidor iniciado en http://127.0.0.1:$port ✅"