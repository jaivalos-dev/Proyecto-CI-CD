name: Django CI Básico

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: proyecto_cicd.settings
      DJANGO_SECRET_KEY: dummy-ci
      DJANGO_DEBUG: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Migrate (sqlite)
        run: python manage.py migrate --noinput

      - name: Tests
        run: python manage.py test --verbosity 2

      - name: Empaquetar artefacto desde HEAD (git archive)
        run: |
          git archive --format=tar.gz -o build.tar.gz HEAD

      - name: Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          name: django-build
          path: build.tar.gz

  cd:
      name: CD - Despliegue local (Self-Hosted)
      needs: ci
      runs-on: [self-hosted, deploy]   # usa tu runner con label “deploy”
      if: ${{ github.ref == 'refs/heads/main' && success() }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configurar entorno Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.11"

        - name: Instalar dependencias
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Aplicar migraciones
          run: python manage.py migrate --noinput

        - name: Collectstatic
          run: python manage.py collectstatic --noinput

        - name: Levantar Django como tarea programada (puerto 8000)
          shell: powershell
          run: |
            $ErrorActionPreference = 'Stop'
            Import-Module ScheduledTasks

            $port   = 8000
            $task   = 'DjangoRunserver'
            $wd     = $env:GITHUB_WORKSPACE
            $ps1    = Join-Path $wd 'run_django.ps1'
            $outLog = Join-Path $wd 'runserver.out.log'
            $errLog = Join-Path $wd 'runserver.err.log'

            # Ruta absoluta de python del job
            $python = (Get-Command python).Source

            # Abrir firewall (idempotente)
            netsh advfirewall firewall add rule name="Django 8000" dir=in action=allow protocol=TCP localport=$port 2>$null | Out-Null

            # Matar procesos en 8000
            $conns = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
            if ($conns) {
              $pids = $conns | Select-Object -ExpandProperty OwningProcess | Sort-Object -Unique
              foreach ($pid in $pids) { try { Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue } catch {} }
            }

            # Script que arranca Django con logs
            @"
            Set-Location "$wd"
            `$env:DJANGO_SETTINGS_MODULE = "proyecto_cicd.settings"
            `$env:DJANGO_DEBUG          = "true"
            `$env:DJANGO_ALLOWED_HOSTS  = "127.0.0.1,localhost"
            & "$python" manage.py runserver 0.0.0.0:$port 1>>"$outLog" 2>>"$errLog"
            "@ | Out-File -FilePath $ps1 -Encoding UTF8 -Force

            # Borrar tarea previa si existe
            $existing = Get-ScheduledTask -TaskName $task -ErrorAction SilentlyContinue
            if ($existing) { Unregister-ScheduledTask -TaskName $task -Confirm:$false }

            # --- Opción 1: S4U con el usuario del servicio del runner (recomendada)
            $user = "$($env:USERDOMAIN)\$($env:USERNAME)"
            $principal = New-ScheduledTaskPrincipal -UserId $user -LogonType S4U -RunLevel Highest

            # --- Opción 2 (alternativa): como SYSTEM
            # $principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount -RunLevel Highest

            $action  = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$ps1`""
            $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).AddMinutes(1)

            Register-ScheduledTask -TaskName $task -Action $action -Trigger $trigger -Principal $principal | Out-Null
            Start-ScheduledTask -TaskName $task

            Start-Sleep -Seconds 6

            # Verificación
            $ok = Test-NetConnection -ComputerName 127.0.0.1 -Port $port -InformationLevel Quiet
            if (-not $ok) {
              Write-Host "No hay nada escuchando en el puerto $port. Últimas líneas de log:"
              if (Test-Path $outLog) { Get-Content $outLog -Tail 80 | Write-Host }
              if (Test-Path $errLog) { Get-Content $errLog -Tail 80 | Write-Host }
              exit 1
            }

            Write-Host "Servidor iniciado por tarea programada en http://127.0.0.1:$port ✅"
