name: Django CI Básico

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: proyecto_cicd.settings
      DJANGO_SECRET_KEY: dummy-ci
      DJANGO_DEBUG: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Migrate (sqlite)
        run: python manage.py migrate --noinput

      - name: Tests
        run: python manage.py test --verbosity 2

      - name: Empaquetar artefacto desde HEAD (git archive)
        run: |
          git archive --format=tar.gz -o build.tar.gz HEAD

      - name: Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          name: django-build
          path: build.tar.gz

  cd:
      name: CD - Despliegue local (Self-Hosted)
      needs: ci
      runs-on: [self-hosted, deploy]   # usa tu runner con label “deploy”
      if: ${{ github.ref == 'refs/heads/main' && success() }}

      steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Configurar entorno Python
          uses: actions/setup-python@v5
          with:
            python-version: "3.11"

        - name: Instalar dependencias
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Aplicar migraciones
          run: python manage.py migrate --noinput

        - name: Collectstatic
          run: python manage.py collectstatic --noinput

        - name: Levantar Django como tarea programada (puerto 8000)
          shell: powershell
          run: |
            $ErrorActionPreference = "Stop"
            $port  = 8000
            $task  = "DjangoRunserver"
            $wd    = $env:GITHUB_WORKSPACE
            $out   = Join-Path $wd "runserver.out.log"
            $err   = Join-Path $wd "runserver.err.log"
            $python = (Get-Command python).Source  # ruta completa a python.exe

            # 0) Abrir firewall para el puerto (idempotente)
            netsh advfirewall firewall add rule name="Django 8000" dir=in action=allow protocol=TCP localport=$port 2>$null | Out-Null

            # 1) Matar procesos que estén usando 8000 (si los hay)
            $conns = Get-NetTCPConnection -LocalPort $port -State Listen -ErrorAction SilentlyContinue
            if ($conns) {
              $pids = $conns | Select-Object -ExpandProperty OwningProcess | Sort-Object -Unique
              foreach ($pid in $pids) { try { Stop-Process -Id $pid -Force -ErrorAction SilentlyContinue } catch {} }
            }

            # 2) Si la tarea existe, terminarla y borrarla sin fallar el paso
            schtasks /Query /TN $task 2>$null | Out-Null
            if ($LASTEXITCODE -eq 0) {
              schtasks /End    /TN $task 2>$null | Out-Null
              schtasks /Delete /TN $task /F 2>$null | Out-Null
            }

            # 3) Comando de arranque (con variables y logs)
            $quotedWd = '"' + $wd + '"'
            $quotedPy = '"' + $python + '"'
            $cmd = "powershell -NoProfile -ExecutionPolicy Bypass -Command " +
                  "`"cd $quotedWd; " +
                  "`$env:DJANGO_SETTINGS_MODULE='proyecto_cicd.settings'; " +
                  "`$env:DJANGO_DEBUG='true'; " +
                  "`$env:DJANGO_ALLOWED_HOSTS='127.0.0.1,localhost'; " +
                  "& $quotedPy manage.py runserver 0.0.0.0:$port > `"$out`" 2> `"$err`"`""

            # 4) Crear y ejecutar la tarea (fuera del árbol del runner)
            schtasks /Create /TN $task /TR $cmd /SC ONCE /ST 23:59 /RL HIGHEST /RU SYSTEM /F | Out-Null
            schtasks /Run /TN $task | Out-Null

            Start-Sleep -Seconds 6

            # 5) Verificar que hay algo escuchando en 8000; si no, mostrar logs y fallar
            $ok = Test-NetConnection -ComputerName 127.0.0.1 -Port $port -InformationLevel Quiet
            if (-not $ok) {
              Write-Host "No hay nada escuchando en el puerto $port. Últimas líneas de log:"
              if (Test-Path $out) { Get-Content $out -Tail 80 | Write-Host }
              if (Test-Path $err) { Get-Content $err -Tail 80 | Write-Host }
              exit 1
            }

            Write-Host "Servidor iniciado por tarea programada en http://127.0.0.1:$port ✅"
