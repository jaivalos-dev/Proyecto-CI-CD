name: Django CI Básico

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      DJANGO_SETTINGS_MODULE: proyecto_cicd.settings
      DJANGO_SECRET_KEY: dummy-ci
      DJANGO_DEBUG: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Django check
        run: python manage.py check

      - name: Migrate (sqlite)
        run: python manage.py migrate --noinput

      - name: Tests
        run: python manage.py test --verbosity 2

      - name: Empaquetar artefacto desde HEAD (git archive)
        run: |
          git archive --format=tar.gz -o build.tar.gz HEAD

      - name: Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          name: django-build
          path: build.tar.gz

  cd:
    name: CD - Despliegue local (Self-Hosted)
    needs: ci
    runs-on: [self-hosted, deploy]
    if: ${{ github.ref == 'refs/heads/main' && success() }}
    steps:
      # 0) Detener servidor previo y liberar locks
      - name: Stop previous Django task & free port
        shell: powershell
        continue-on-error: true
        run: |
          $ErrorActionPreference = 'SilentlyContinue'
          $task = 'DjangoRunserver'
          if (Get-ScheduledTask -TaskName $task) {
            Stop-ScheduledTask -TaskName $task
            Start-Sleep -Seconds 2
            Unregister-ScheduledTask -TaskName $task -Confirm:$false
          }
          # Matar procesos escuchando en 8000
          $conns = Get-NetTCPConnection -LocalPort 8000 -State Listen
          if ($conns) {
            $pids = $conns | Select-Object -ExpandProperty OwningProcess | Sort-Object -Unique
            foreach ($pid in $pids) { Stop-Process -Id $pid -Force }
          }
          Start-Sleep -Seconds 2

      # 1) Checkout sin limpiar (evita borrar db.sqlite3)
      - name: Checkout
        uses: actions/checkout@v4
        with:
          clean: false     # <--- clave para evitar EBUSY
          fetch-depth: 0

      # 2) Python y deps como ya lo tienes…
      - name: Configurar entorno Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Aplicar migraciones
        run: python manage.py migrate --noinput

      - name: Collectstatic
        run: python manage.py collectstatic --noinput

      # 3) Tarea programada (versión corregida con LogonType=S4U)
      - name: Levantar Django como tarea programada (puerto 8000)
        shell: powershell
        run: |
          $ErrorActionPreference = 'Stop'
          Import-Module ScheduledTasks

          $port   = 8000
          $task   = 'DjangoRunserver'
          $wd     = $env:GITHUB_WORKSPACE
          $ps1    = Join-Path $wd 'run_django.ps1'
          $outLog = Join-Path $wd 'runserver.out.log'
          $errLog = Join-Path $wd 'runserver.err.log'
          $python = (Get-Command python).Source

          # Firewall idempotente
          netsh advfirewall firewall add rule name="Django 8000" dir=in action=allow protocol=TCP localport=$port 2>$null | Out-Null

          # Script de arranque con logs
          @"
          Set-Location "$wd"
          `$env:DJANGO_SETTINGS_MODULE = "proyecto_cicd.settings"
          `$env:DJANGO_DEBUG          = "true"
          `$env:DJANGO_ALLOWED_HOSTS  = "127.0.0.1,localhost"
          & "$python" manage.py runserver 0.0.0.0:$port 1>>"$outLog" 2>>"$errLog"
          "@ | Out-File -FilePath $ps1 -Encoding UTF8 -Force

          # Registrar tarea con S4U (o usa SYSTEM si tu entorno no permite S4U)
          $user = "$($env:USERDOMAIN)\$($env:USERNAME)"
          $principal = New-ScheduledTaskPrincipal -UserId $user -LogonType S4U -RunLevel Highest
          # Alternativa:
          # $principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -LogonType ServiceAccount -RunLevel Highest

          $action  = New-ScheduledTaskAction -Execute 'powershell.exe' -Argument "-NoProfile -ExecutionPolicy Bypass -File `"$ps1`""
          $trigger = New-ScheduledTaskTrigger -Once -At (Get-Date).AddMinutes(1)

          Register-ScheduledTask -TaskName $task -Action $action -Trigger $trigger -Principal $principal | Out-Null
          Start-ScheduledTask -TaskName $task

          Start-Sleep -Seconds 6
          if (-not (Test-NetConnection -ComputerName 127.0.0.1 -Port $port -InformationLevel Quiet)) {
            Write-Host "No hay nada en :$port. Últimas líneas:"
            if (Test-Path $outLog) { Get-Content $outLog -Tail 80 | Write-Host }
            if (Test-Path $errLog) { Get-Content $errLog -Tail 80 | Write-Host }
            exit 1
          }
          Write-Host "Servidor iniciado en http://127.0.0.1:$port ✅"
